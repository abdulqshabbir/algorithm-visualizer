{"version":3,"sources":["algorithms/bubbleSort.js","algorithms/insertionSort.js","algorithms/selectionSort.js","arrayLengthSlider/arrayLengthSlider.js","sortingVisualizer/sortingVisualizer.js","App.js","index.js"],"names":["createBubbleSortAnimationFrames","unsortedArray","arrayToSort","slice","arrayAnimationFrames","currentAnimationFrame","didSwap","i","length","swapTwoArrayElements","push","array","j","undefined","Error","temp","createInsertionSortAnimationFrames","animationFrames","valueToInsert","hole","createSelectionSortAnimationFrames","minIndex","min","arrayAfterSwap","ArrayLengthSlider","arrayLength","setArrayLength","isAnimating","Modal","trigger","Button","primary","disabled","Header","Content","x","axis","xmin","xmax","xstep","onChange","generateRandomArrayOfLength","n","randomArray","generateRandomWholeNumberInRange","max","irrationalRandomNumber","Math","random","floor","SortingVisualizer","useState","setRandomArray","setIsAnimating","useEffect","initialRandomArray","className","map","number","index","key","style","paddingBottom","onClick","frame","setTimeout","secondary","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c6af5c37.chunk.js","sourcesContent":["export function createBubbleSortAnimationFrames(unsortedArray) {\n  let arrayToSort = unsortedArray.slice();\n  let arrayAnimationFrames = [];\n  let currentAnimationFrame = [];\n  let didSwap = true;\n  while (didSwap) {\n    didSwap = false;\n    for (let i = 0; i < arrayToSort.length - 1; i++) {\n      if (arrayToSort[i] > arrayToSort[i + 1]) {\n        swapTwoArrayElements(arrayToSort, i, i + 1);\n        //push state of array after swap onto array animation frames\n        currentAnimationFrame = arrayToSort.slice();\n        arrayAnimationFrames.push(currentAnimationFrame);\n        didSwap = true;\n      }\n    }\n  }\n  return arrayAnimationFrames;\n}\n\nexport default createBubbleSortAnimationFrames;\n\nfunction swapTwoArrayElements(array, i, j) {\n  // a and b are the indices of an array whose elements need to be swapped\n  if (array[j] === undefined || array[i] === undefined) {\n    throw new Error(\"Out of bounds error!\");\n  }\n  let temp = array[j];\n  array[j] = array[i];\n  array[i] = temp;\n}\n","const createInsertionSortAnimationFrames = array => {\n  /*\n        At any time, our array will have a sorted and unsorted subset (sorted to left, unsorted to right)\n        We will take elements one at a time from the unsorted subset and move the lowest numbers into the left-most position\n        in the sorted subset.\n    */\n  const arrayToSort = array.slice();\n  const animationFrames = [];\n\n  let currentAnimationFrame = [];\n  for (let i = 1; i < arrayToSort.length; i++) {\n    let valueToInsert = arrayToSort[i];\n    let hole = i;\n\n    while (hole > 0 && valueToInsert < arrayToSort[hole - 1]) {\n      // shift array element one index to the right\n      arrayToSort[hole] = arrayToSort[hole - 1];\n\n      // Note: this line below is only for visualizing the sorting algorithm\n      arrayToSort[hole - 1] = 0;\n      currentAnimationFrame = arrayToSort.slice();\n      animationFrames.push(currentAnimationFrame);\n\n      // shift 'hole' to the left\n      hole--;\n    }\n    arrayToSort[hole] = valueToInsert;\n\n    // handle animations\n    currentAnimationFrame = arrayToSort.slice();\n    animationFrames.push(currentAnimationFrame);\n  }\n  return animationFrames;\n};\n\nexport default createInsertionSortAnimationFrames;\n","const createSelectionSortAnimationFrames = arrayToSort => {\n  /*\n        input: array to sort of length n\n        output: sorted array\n    */\n  const array = arrayToSort.slice();\n  const initialArray = array.slice();\n  const animationFrames = [initialArray];\n\n  for (let i = 0; i < array.length - 1; i++) {\n    // let i represent the start of the unsorted half of the array\n    let minIndex = i;\n    let min = array[i];\n    //let j represent the index that will search for a minimum value in the\n    //unsorted half for a given pass\n    for (let j = i + 1; j < array.length; j++) {\n      if (array[j] < min) {\n        // if a smaller element is found, update min and minIndex\n        min = array[j];\n        minIndex = j;\n      }\n    }\n    let temp = array[i];\n    array[i] = min;\n    array[minIndex] = temp;\n\n    let arrayAfterSwap = array.slice();\n    animationFrames.push(arrayAfterSwap);\n  }\n  return animationFrames;\n};\n\nexport default createSelectionSortAnimationFrames;\n","import React from \"react\";\nimport Slider from \"react-input-slider\";\nimport { Button, Modal } from \"semantic-ui-react\";\n\nconst ArrayLengthSlider = ({ arrayLength, setArrayLength, isAnimating }) => (\n  <Modal\n    trigger={\n      <Button primary disabled={isAnimating}>\n        Array Length Slider\n      </Button>\n    }\n  >\n    <Modal.Header>\n      Choose an Appropiate Array Length by using the Slider!\n    </Modal.Header>\n    <Modal.Content>\n      <p>Current length chosen: {arrayLength.x}</p>\n      <Slider\n        axis=\"x\"\n        xmin={5}\n        xmax={70}\n        xstep={1}\n        x={arrayLength.x}\n        onChange={({ x }) => setArrayLength({ x })}\n      />\n    </Modal.Content>\n  </Modal>\n);\n\nexport default ArrayLengthSlider;\n","import React, { useState, useEffect } from \"react\";\nimport createBubbleSortAnimationFrames from \"../algorithms/bubbleSort\";\nimport createInsertionSortAnimationFrames from \"../algorithms/insertionSort\";\nimport createSelectionSortAnimationFrames from \"../algorithms/selectionSort\";\nimport ArrayLengthSlider from \"../arrayLengthSlider/arrayLengthSlider\";\nimport { Button } from \"semantic-ui-react\";\nimport \"./sortingVisualizer.css\";\n\nconst MIN = 10;\nconst MAX = 300;\n\nconst SortingVisualizer = () => {\n  const [randomArray, setRandomArray] = useState([]);\n  const [arrayLength, setArrayLength] = useState({ x: 30 });\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    let initialRandomArray = generateRandomArrayOfLength(arrayLength.x);\n    setRandomArray(initialRandomArray);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [setRandomArray, arrayLength]);\n\n  const handleBubbleSortAnimation = () => {\n    const animationFrames = createBubbleSortAnimationFrames(randomArray);\n    setIsAnimating(true);\n    for (let frame = 0; frame < animationFrames.length; frame++) {\n      setTimeout(() => {\n        setRandomArray(animationFrames[frame]);\n      }, 500 + 10 * frame);\n    }\n    setTimeout(() => {\n      setIsAnimating(false);\n    }, 500 + 10 * animationFrames.length);\n  };\n\n  const handleInsertionSortAnimation = () => {\n    const animationFrames = createInsertionSortAnimationFrames(randomArray);\n    setIsAnimating(true);\n    for (let frame = 0; frame < animationFrames.length; frame++) {\n      setTimeout(() => {\n        setRandomArray(animationFrames[frame]);\n      }, 50 * frame);\n    }\n    setTimeout(() => {\n      setIsAnimating(false);\n    }, 50 * animationFrames.length);\n  };\n\n  const handleSelectionSortAnimation = () => {\n    const animationFrames = createSelectionSortAnimationFrames(randomArray);\n    setIsAnimating(true);\n    for (let frame = 0; frame < animationFrames.length; frame++) {\n      setTimeout(() => {\n        setRandomArray(animationFrames[frame]);\n      }, 30 * frame);\n    }\n    setTimeout(() => {\n      setIsAnimating(false);\n    }, 30 * animationFrames.length);\n  };\n\n  const createNewRandomArray = () => {\n    let initialRandomArray = generateRandomArrayOfLength(arrayLength.x);\n    setRandomArray(initialRandomArray);\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        {randomArray.map((number, index) => (\n          <div\n            key={index}\n            className={\"vertical-bar\"}\n            style={{ paddingBottom: `${number}px` }}\n          ></div>\n        ))}\n      </div>\n      <Button onClick={createNewRandomArray} primary disabled={isAnimating}>\n        New Array\n      </Button>\n      <ArrayLengthSlider\n        arrayLength={arrayLength}\n        setArrayLength={setArrayLength}\n        isAnimating={isAnimating}\n      />\n      <Button\n        onClick={handleBubbleSortAnimation}\n        secondary\n        disabled={isAnimating}\n      >\n        Bubble Sort\n      </Button>\n      <Button\n        onClick={handleInsertionSortAnimation}\n        secondary\n        disabled={isAnimating}\n      >\n        Insertion Sort\n      </Button>\n      <Button\n        onClick={handleSelectionSortAnimation}\n        secondary\n        disabled={isAnimating}\n      >\n        Selection Sort\n      </Button>\n    </div>\n  );\n};\n\nconst generateRandomArrayOfLength = (n) => {\n  const randomArray = [];\n  for (let i = 0; i < n; i++) {\n    randomArray.push(generateRandomWholeNumberInRange(MIN, MAX));\n  }\n  return randomArray;\n};\n\nconst generateRandomWholeNumberInRange = (min, max) => {\n  // will generate random whole number between min(inclusive) and max (exclusive)\n  const irrationalRandomNumber = Math.random() * (max - min) + min;\n  return Math.floor(irrationalRandomNumber);\n};\n\nexport default SortingVisualizer;\n","import React from \"react\";\nimport SortingVisualizer from \"./sortingVisualizer/sortingVisualizer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}